Mk1 4-Bit CPU : Breadboard Implementation Sheet

== Overview ==
I had designed my CPU completely from gates in Logisim. I think that in order to fully understand and demonstrate my technical skills and knowledge, I will create one of 
each subsystem (e.g creating a 1-bit adder before the 4-bit adder, which will just be an IC, or building one register before using EEPROM).
I am also creating a separate circuit in Logisim that I can test and record my simple demonstrator circuits with. I may be able to fit the whole circuit, although
it seems unlikely and most likely will have to create a schematic elsewhere.

== Budget ==
I would like to spend no more than $200 for everything - includes components, breadboards, and tools that I will need to buy.
I think I will need to eventually buy some tools - but I will 3D print as much as I can. One of the biggest problems I've had so far is pulling ICs - the pins bend.
So I will 3D print a simple IC puller.
The most important things to buy are:
- ICs : lots of logic circuits necessary
- Breadboards : as my wiring gets better over time so will my space efficiency, but I will need to accodomate for the extra space needed.
- Jumper wires : I only have some at this point and will need many more in future.
- Storage : I don't know what to do for this, as the computer will get very big and breadboards will have wires going all between them. I will figure it out shortly.

== Logbook ==
	#- 27th June. Logging begins. Last night I created the one bit adder, and it costed $8. Of course this can be lowered, but still required some troubleshooting
	and wiring, albeit it was my first time. Certainly though, even with practice it is hard to do this one-by-one. It is not like in Logisim where I can make once and use,
	I have to make it for the amount of times I want to use it. The adder is ubiquitous, so it is silly to have 7 ICs for a single 4-bit adder. Building a one-bit adder and 
	the Logisim design demonstrates my knowledge and understanding enough.
	In terms of memory, I think that I will use a standard EEPROM. However, I have only been able to find 8-bit memory modules, no 4-bit ones. I'm afraid that I may
	have to design some circuitry that will split each 8bit address into 2 4-bit lines. It shouldn't be hard, if I can't find 4-bit modules I can use commonly available 8-bit ones.
	Additionally, my instruction memory actually can be as big as I want it now, since I've made the move to non-absolute jump instructions with relative addressing and jump tables.
	Regardless, that is dealt with. I do also need to discuss general-purpose (GP) RAM, but I will do that at a later date. Perhaps I can make my own module if I refine my register making.
	Speaking of registers, I have decided to make that today instead of starting the ALU. I bought all necessary chips today including the 4-bit adder and D-flip flops but blew the 4-bit adder,
	of which I will have to purchase another one tomorrow. Regardless, I can begin making a register. If I can streamline the process now, it will make my life easier.

	I will use my register design, using a buffer and write signal with parallel D flip flops as usual. Also I do have to think about making my clock board with my 555 timers. I think for now I can pulse it using a simple push-button, as D flip flops offer rising edge functionality instead of continuous clock high. 
	Tomorrow I will map out and purchase most components for my ALU, not including the instruction decoder, as it will take more time to figure out what plexers I can buy and which ones I can make.
	Also, quick thought while I'm setting up the board, I should definitely assemble my logic probe. It may have assisted in troubleshooting and prevented me from blowing the board.
	I should also buy more DIP switches tomorrow - they are very useful, pretty much essential.

	I've been thinking about the register for a while - I realised I don't have enough AND gates. Then I came to a realisation, I only need one AND gate. Currently, I am using a buffer to let through the data input on a high (rising) clock pulse. This alone is 4 AND gates - plus the one to let through the clock on write mode. But the buffer is not even needed, because the data won't be let through on
	low clock pulse. So one AND gate is required - the one that lets through the clock pulse on high write. I was thinking initially to use a transistor along with the quad AND IC, but now I won't need to.
	However, I don't want to use a whole IC for a single gate, and want to keep registers independent from each other. So for now, I will use that AND gate for demonstration as I have not tested transistors and that will add troubleshooting that I will not want to deal with at the moment, however it is definitely possible and cost effective for future.
	I will make the updated 4 bit register now.

	The enable functionality is working - but I've still got the same leakage problem. I will need to think of a fix for this - a small module that converts the lower to low and higher to high with a threshold by pot or something.
	Ok, so I may have to deal with this leakage issue earlier than I expected. So the enable (CLK * W) has leakage right? It is kind of on, but then more on for logic high. This is a slight problem. It is being fed into the clock input of the flip flops, and the datasheet says that the "clock triggering occurs at a particular voltage level". Since the device isn't working, and I've rechecked the wires which are very simple, I think that the rising edge detector cannot detect the small change in voltage, as it is outside the voltage threshold to begin with and never reaches it. This is a big issue that I must solve preventatively, but if I can't it will increase costs.

	I officially yield. It's nearly midnight and there are strange issues. I will iron out everything tomorrow. So many things can go wrong in real life. The D-flip flop still isn't working, even with a
	straight up button to 5V. There are many potential things that are going wrong. Here is a list of all things I have to do tomorrow related to this:
	- Assemble logic probe
	- Replace multimeter batteries and probe all connections for strange voltages, check power supply as well.
	- Retest faulty circuits and buy if needed
	- Assemble clock module with 555 timer.
	- Test D-flip flop and get working.
	- Design and source ALU componentry
	- Fix leakage issues.


	#- 28th June. 2nd day of logging (3rd of work). I wanted to get straight into building this morning - it is a lot of fun. In the last 2 hours, I have ironed out many issues. First of all, some issues were being caused by the underpowered power supply. I was using
	the one that I bought for the LED matrix, and it was only supplying around 3.5V on 5V mode for the breadboard converter. I used the 12V one from my 3D printer and it works much much better now. This probably was the root of many issues, but they still need to be
	tested before their causes are determined. I wanted to do the register this morning, since I still had reason to believe the adder was blown. Now I think, however, that I: 
	- Didn't connect pull-up to the otherside of the switches
	- Undervolted PSU
	So I will retry later before going to Jaycar again, getting new components and returning the adder if needed. I also took a photo of the dirty receipt I pulled out of the bin so I can return it just in case. Regardless, back to the D flip flops. So
	I still didn't have them working last night, but I just got them working. Before that, however, I built the basic circuit for a clean clock pulse using 555 timer. I pulled some passive components and put together a button debounce circuit that is 
	working very nicely. I wished I had an oscilloscope to look at the beautiful signal (I checked it on multimeter and it was splendid, solid voltage but some 0.2V leakage, meh). So anyway, I worked on the flip flop for a bit. Nothing was working, but then I thought I had to hook 
	up the CLR input. I did this, and the output was much nicer but still not responding the actual D inputs. After inspecting the truth table, I came to a realisation. My switch, when on, simply closes the circuit to 5V. So while the switch was open, the D input was not actually
	logic low, but floating. Before this, I thought it was the DIP switch that was the problem. Anyway, I tested with a wire and voila, it worked. I just have to pull-down all my switches to GND via resistor. The more you know! Anyway, my main plan for today is similar as
	yesterday's, but removing the things that I did.
	- Reassemble adder and verify
	- Create a register properly
	- Create actual clock module with variable time (potentiometer) and switch between astable and monostable modes/
	- Plan ALU and components
	- Buy components for ALU
	- Plan 3 GP CPU registers
	- Plan progmem and PG mem.

	Lots to do today - mostly ALU and memory. 11:30am atm.
	I fixed the leakage current problem with the other ICs. It was the exact same as the D flip flop - the inputs were not being pulled low and therefore were floating while the switch was open. So, I will now create the first register with write enable. I've also been
	thinking about getting a label printer to label all my circuits. I think I will get the simplest, cheapest one, as I only want to print clean, small labels to show inputs and outputs for modules, and their names. I'll also get a composition book, because it looks
	unique and also because Young Sheldon used it in that one episode with the Elon Musk cameo where he reads his notes on retropropulsion landing techniques. 

	#- 28th June. 3rd day of logging. I bought the composition book and label printer, which is quite nice. I think I will keep logging in here, due to its flexible nature, but all documentation will begin to usurp into the composition book. I will also need to mostly redesign the CPU architecture. I also researched video circuitry, which is very simple and cool for VGA. I wanted to research HDMI to see if I can create that signal, but it seems unlikely. I am thinking about creating a small Arduino library to be a VGA driver.
	- Assemble clock module
	- Assemble register
	- Plan ALU
	- Test adder
	- Plan memory

	#- 29th June. 4th day of logging.

	10:23am. I have created the register fully pretty much. I was having some problems with the AND gate clock - I realised it was because the voltage of the clock isn't high enough due to the LED indicator eating most of the current. I will use a transistor to power the LED
	instead. First time actually using a transistor, looking forward to it.
	10:46am. To my surprise, the transistor idea worked first try. A nice voltage on clock output now. I will retry the entire circuit. 

	2:23pm. I scrapped the transistor idea and realised that I only had a lower voltage because of a resistor connected to the output of the 555 timer so I can hookup an LED much earlier when testing the clock circuit. My D flip flop completely broke and wasn't working, it took me
	about 3 hours to realise that the ground wire was broken, whcih I realised from tapping it and then pulled it out, and it was in two pieces. This was unexpected as the LED output from Q1 was on. The IC was finding ground through the other components or its parasitic 
	capacitance. Anyway, I fixed it and now it is working.

	7:54pm. I made the astable clock circuit, working nicely with a potentiometer. In terms of logs, I will do my general, informal, discussion logs in here, while I will put my logs of changing or making things formally in the composition book, signalled with a label and the
	title of the thing being changed. In terms of creating a nice bimodal clock circuit, I am thinking of keeping the circuits as they are, and then using the single-pole double-throw switch to switch the out signal between astable and monostable mode. This is very simple, but will require two 555 timers. This is no problem, but I think if there is a more ideal, slightly more complex solution I may opt for it. I will review the differences and see if it is optimal. If there are different polarities, then I will need to use transistors and will opt for 
	the other method. Otherwise I can do it with the single switch.

	9:39pm. I made the final clock circuit a while ago. I thought about whether or not to add a bistable 555 timer - but it's fine, I can just tie it high when needed or add a toggle switch.
	Still need to plan ALU and memorym, and assemble adder.